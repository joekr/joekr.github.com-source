<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Software Development on Joe Kratzat</title>
    <link>http://joekratzat.com/categories/software-development/</link>
    <description>Recent content in Software Development on Joe Kratzat</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 20 Apr 2014 20:35:00 -0500</lastBuildDate>
    <atom:link href="http://joekratzat.com/categories/software-development/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Theme Toggler: My first Atom package</title>
      <link>http://joekratzat.com/blog/2014/theme-toggler-my-first-atom-package/</link>
      <pubDate>Sun, 20 Apr 2014 20:35:00 -0500</pubDate>
      
      <guid>http://joekratzat.com/blog/2014/theme-toggler-my-first-atom-package/</guid>
      <description>&lt;p&gt;Lately, I have been using the &lt;a href=&#34;http://Atom.io&#34;&gt;Atom&lt;/a&gt; editor. I really like working with it. The custom packages and themes make it very nice. My only issue has been that dark themes are terrible to work with while outside, and light themes are too bright inside.&lt;/p&gt;

&lt;p&gt;I know there are two great theme changing packages already: &lt;a href=&#34;https://atom.io/packages/outdoor-theme&#34;&gt;Outdoor Theme&lt;/a&gt;, and &lt;a href=&#34;https://atom.io/packages/theme-switcher&#34;&gt;Theme Switcher&lt;/a&gt;, but neither gave me quite what I wanted.&lt;/p&gt;

&lt;p&gt;Since Atom makes it easy to generate and distribute packages I went ahead and created &lt;a href=&#34;https://atom.io/packages/theme-toggler&#34;&gt;Theme Toggler&lt;/a&gt;. It is very basic. It toggles between a dark and light theme using &lt;code&gt;ctrl + alt + t&lt;/code&gt;. The one thing it does different from Theme Switcher is changing the UI theme as well as the Syntax theme. I like to keep the UI consistent with the Syntax, but if you don&amp;rsquo;t you can use the settings to easily override my preferences.&lt;/p&gt;

&lt;p&gt;Anyway, that was my motivation for creating Theme Toggler. Well, that and I have wanted to make a package for a while. I hope to write up in more detail just how to create a package. Until then Atom has some great documentation on this &lt;a href=&#34;https://atom.io/docs/latest/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>3rd party libraries and Android Studio Gradle issues</title>
      <link>http://joekratzat.com/blog/2013/3rd-party-libraries-and-android-studio-gradle-issues/</link>
      <pubDate>Wed, 23 Oct 2013 15:35:00 -0500</pubDate>
      
      <guid>http://joekratzat.com/blog/2013/3rd-party-libraries-and-android-studio-gradle-issues/</guid>
      <description>&lt;p&gt;I want to start this off by saying that this was for Android Studio 0.2 and at the time of this post that is already outdated. However, I feel this might help others.&lt;/p&gt;

&lt;p&gt;The project I was working on was currently using an older version of the Android Gradle plugin (0.4.2) with and older version of Android Studio. I had version 0.2 which requires the Android Gradle plugin minimum of 0.5.&lt;/p&gt;

&lt;p&gt;I was getting gradle build errors, and Android Studio import errors. I needed to update my project &lt;code&gt;build.gradle&lt;/code&gt; file as well as all the libraries. This meant I needed to go and edit the &lt;code&gt;build.gradle&lt;/code&gt; file manually (&lt;a href=&#34;http://tools.android.com/recent/androidstudio030released&#34;&gt;0.3 fixes this issue&lt;/a&gt;), and change:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;dependencies {
  classpath &#39;com.android.tools.build:gradle:0.4.2&#39;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;to&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;dependencies {
  classpath &#39;com.android.tools.build:gradle:0.5&#39;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Doing this for the main app was not an issue, however some of the libraries I did not have access to like &lt;a href=&#34;https://github.com/JakeWharton/ActionBarSherlock&#34;&gt;ActionBarSherlock&lt;/a&gt;. I had to fork the repo and update the gradle version.&lt;/p&gt;

&lt;p&gt;For other projects like &lt;a href=&#34;https://github.com/jfeinstein10/SlidingMenu&#34;&gt;SlidingMenu&lt;/a&gt; I needed to fork it and setup a &lt;code&gt;build.gradle&lt;/code&gt; file manually. This is my default &lt;a href=&#34;https://gist.github.com/joekr/7128972&#34;&gt;build.gradle&lt;/a&gt; file&lt;/p&gt;

&lt;p&gt;Lastly, for &lt;a href=&#34;https://android.googlesource.com/platform/frameworks/volley/&#34;&gt;Volley&lt;/a&gt; I had to create a new repo and add the followling:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;buildscript {
  repositories {
      mavenCentral()
  }
  dependencies {
      classpath &#39;com.android.tools.build:gradle:0.5+&#39;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I&amp;rsquo;m not sure if doing this is the best way, but it allowed my project to build and seems to be working. I have seen others doing the same thing, like &lt;a href=&#34;https://github.com/path/ActionBarSherlock&#34;&gt;Path&amp;rsquo;s ActionBarSherlock&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If I find a better way to do this you better believe I will post an update. This just seems gross to me.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>jenkins and bitbucket</title>
      <link>http://joekratzat.com/blog/2013/jenkins-and-bitbucket/</link>
      <pubDate>Tue, 21 May 2013 22:11:00 -0500</pubDate>
      
      <guid>http://joekratzat.com/blog/2013/jenkins-and-bitbucket/</guid>
      <description>

&lt;p&gt;Tonight I had to setup a new instance of Jenkins. Having never set  Jenkins to work with Bitbucket before I thought this might help out others. This will cover Jenkins accessing only Bitbucket, having it deploy might be another post, but that isn&amp;rsquo;t covered here.&lt;/p&gt;

&lt;h2 id=&#34;jenkins-install&#34;&gt;Jenkins install&lt;/h2&gt;

&lt;p&gt;Starting out, I have a blank &lt;a href=&#34;https://www.digitalocean.com/&#34;&gt;Digital Ocean&lt;/a&gt; droplet. There is basically nothing. I had to install Jenkins, which is pretty basic:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;wget -q -O - &lt;a href=&#34;http://pkg.jenkins-ci.org/debian/jenkins-ci.org.key&#34;&gt;http://pkg.jenkins-ci.org/debian/jenkins-ci.org.key&lt;/a&gt; | sudo apt-key add -&lt;/p&gt;

&lt;p&gt;sudo sh -c &amp;lsquo;echo deb &lt;a href=&#34;http://pkg.jenkins-ci.org/debian&#34;&gt;http://pkg.jenkins-ci.org/debian&lt;/a&gt; binary/ &amp;gt; /etc/apt/sources.list.d/jenkins.list&amp;rsquo;&lt;/p&gt;

&lt;p&gt;sudo apt-get update&lt;/p&gt;

&lt;p&gt;sudo apt-get install jenkins&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This will create the jenkins user and start up the Jenkins servlet on port 8080. If you need to setup Jenkins other ways checkout the &lt;a href=&#34;https://wiki.jenkins-ci.org/display/JENKINS/Installing+Jenkins+on+Ubuntu&#34;&gt;How-to&lt;/a&gt;.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h2 id=&#34;jenkins-unix-security-setup&#34;&gt;Jenkins Unix/security setup&lt;/h2&gt;

&lt;p&gt;Next I needed to setup Jenkins to use my unix user permissions. The security settings can be accessed by going to: &lt;a href=&#34;http://your_server:8080/configureSecurity/&#34;&gt;http://your_server:8080/configureSecurity/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;From the configureSecurity page select &amp;ldquo;&lt;strong&gt;Unix user/group database&lt;/strong&gt;&amp;ldquo;
click on &amp;ldquo;&lt;strong&gt;Advanced&lt;/strong&gt;&amp;rdquo; and add &amp;ldquo;&lt;strong&gt;sshd&lt;/strong&gt;&amp;rdquo; as the Service Name. While setting this up I got on error saying the jenkins user could read from &amp;ldquo;&lt;strong&gt;/etc/shadow/&lt;/strong&gt;&amp;rdquo;. So I had to add the jenkins user to the shadow group.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;usermod -G shadow jenkins&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Lastly to setup permissions I selected: &amp;ldquo;Logged-in users can do anything&amp;rdquo;.&lt;/p&gt;

&lt;h2 id=&#34;git-setup&#34;&gt;Git setup&lt;/h2&gt;

&lt;p&gt;Since this was a basic ubuntu install I had to install git:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;sudo apt-get install git&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Then setup the git user information:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;git config &amp;ndash;global user.email &amp;ldquo;example@email.com&amp;rdquo;&lt;/p&gt;

&lt;p&gt;git config &amp;ndash;global user.name &amp;ldquo;jenkins&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Not having the user info set resulted in Jenkins later through throwing: &lt;strong&gt;hudson.plugins.git.GitException: Could not apply tag jenkins-Pactsafe_-_TEST-2&lt;/strong&gt; when trying to run a build. Better set them now. I used the global config because this droplet will only be used for Jenkins.&lt;/p&gt;

&lt;p&gt;Next install the git plug in for Jenkins. Using the Jenkins menu go to:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Manage Jenkins&lt;/li&gt;
&lt;li&gt;Manage Plugins&lt;/li&gt;
&lt;li&gt;Available&lt;/li&gt;
&lt;li&gt;Then search for &amp;ldquo;Git Plugin&amp;rdquo;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Once Jenkins restarts you can move on to setup a new job.&lt;/p&gt;

&lt;h2 id=&#34;new-job-with-ssh-and-bitbucket&#34;&gt;New Job with SSH and Bitbucket&lt;/h2&gt;

&lt;p&gt;Finally, setting up Jenkins to simply access a repo from Bitbucket! They have a nice write up on this: &lt;a href=&#34;https://confluence.atlassian.com/display/BITBUCKET/Using+the+SSH+protocol+with+bitbucket#UsingtheSSHprotocolwithBitbucket-RepositoryURLformatsbyconnectionprotocol&#34;&gt;SSH with Bitbucket&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Since Digital Ocean allows for shell access I was able to generate an ssh key for my jenkins user. I logged in as jenkins and ran &lt;strong&gt;ssh-keygen&lt;/strong&gt;. ssh-keygen will (by default) generate the public key in ~/.ssh/id_rsa.pub. For more information checkout &lt;a href=&#34;https://confluence.atlassian.com/pages/viewpage.action?pageId=270827678&#34;&gt;Bitbucket&amp;rsquo;s How-to&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Open Bitbucket and go to the repository you want Jenkins to access. As Admin, access the repository&amp;rsquo;s settings and setup a new &lt;a href=&#34;http://blog.bitbucket.org/2012/06/20/deployment-keys/&#34;&gt;deployment key&lt;/a&gt; using the previously generated contents from the id_rsa.pub file.&lt;/p&gt;

&lt;p&gt;You will also need to setup a ~/.ssh/known_hosts file. If you don&amp;rsquo;t the build will fail with this error &lt;strong&gt;stderr: Host key verification failed.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The easiest way to create the known_host file is to run (as jenkins):&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;git ls-remote -h git@bitbucket.org:person/projectmarket.git HEAD&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Doing this will prompt you to add Bitbucket as a known host. Once you confirm the host the key for bitbucket.org it will be added to the ~/.ssh/known_hosts file and you shouldn&amp;rsquo;t get this error anymore.&lt;/p&gt;

&lt;h2 id=&#34;run-the-job&#34;&gt;Run The Job&lt;/h2&gt;

&lt;p&gt;With all of that setup you should be able to run the job and receive a &amp;ldquo;Finished: SUCCESS&amp;rdquo; message in the Console Output.&lt;/p&gt;

&lt;p&gt;There are many things that still need to be setup after this, but this gets Jenkins and Bitbucket playing together.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Carrierwave, RSpec and FactoryGirl</title>
      <link>http://joekratzat.com/blog/2013/carrierwave-rspec-and-factorygirl/</link>
      <pubDate>Tue, 26 Mar 2013 21:02:00 -0500</pubDate>
      
      <guid>http://joekratzat.com/blog/2013/carrierwave-rspec-and-factorygirl/</guid>
      <description>

&lt;p&gt;As part of a project I wanted to run some rspec tests on a model that had many children models using &lt;a href=&#34;https://github.com/jnicklas/carrierwave&#34;&gt;Carrierwave&lt;/a&gt; to upload files to S3.&lt;/p&gt;

&lt;p&gt;My models look something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class User &amp;lt; ActiveRecord::Base
    ...
    has_many :images
    ...
end

class Image &amp;lt; ActiveRecord::Base
    ...
    belongs_to :user

    validates_presence_of :file
    ...
    mount_uploader :file, FileUploader
    ...
end
&lt;/code&gt;&lt;/pre&gt;

&lt;!-- more --&gt;

&lt;p&gt;In order to this I needd a few things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Rspec Tests&lt;/li&gt;
&lt;li&gt;Store files locally (not on S3)&lt;/li&gt;
&lt;li&gt;Clean up locally created files&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;creating-the-test-object&#34;&gt;Creating the test object&lt;/h1&gt;

&lt;p&gt;To help create the test objects I use &lt;a href=&#34;https://github.com/thoughtbot/factory_girl&#34;&gt;FactoryGirl&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;factory :user do
    ...
    after(:build) do |user, eval|
        user.images &amp;lt;&amp;lt; FactoryGirl.build(:image, user: user)
    end
end

factory :image do
    user :user

    file File.open(File.join(Rails.root, &#39;/spec/fixtures/files/image.png&#39;))
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In my user model spec I have the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;describe User do
    it { should have_many :images }

    before(:each){
        @user = FactoryGirl.create(:user)
    }

    describe &amp;quot;images&amp;quot; do

        it &amp;quot;should have multiple images&amp;quot; do

            @user.images.create({document_file:File.open(File.join(Rails.root, &#39;/spec/fixtures/files/image.png&#39;))})
            @user.images.create({document_file:File.open(File.join(Rails.root, &#39;/spec/fixtures/files/image.png&#39;))})


            @user.images.length.should eq(3)
        end
    end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;store-local-for-test&#34;&gt;Store local for test&lt;/h1&gt;

&lt;p&gt;In production and development I didn&amp;rsquo;t want Carrierwave to use S3 as the storage source. So in the &lt;code&gt;app/uploaders/file_uploader.rb&lt;/code&gt; file I removed the line &lt;code&gt;storage :fog&lt;/code&gt;. This is now being configured in a new &lt;code&gt;carrierwave.rb&lt;/code&gt; initalizer:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;if Rails.env.test? or Rails.env.cucumber?
  CarrierWave.configure do |config|
    config.storage = :file
    config.enable_processing = false
  end
else
  CarrierWave.configure do |config|
    config.storage = :fog
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;cleaning-up-files&#34;&gt;Cleaning up files&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;after(:each) do
    if Rails.env.test? || Rails.env.cucumber?
        @document.versions.each do |v|
            store_path = File.dirname(File.dirname(v.document_file.url))
            temp_path = v.document_file.cache_dir
            FileUtils.rm_rf(Dir[&amp;quot;#{Rails.root}/public/#{store_path}/[^.]*&amp;quot;])
            FileUtils.rm_rf(Dir[&amp;quot;#{temp_path}/[^.]*&amp;quot;])
        end
    end
end
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Objective-C Blocks vs NSNotificationCenter for async completion</title>
      <link>http://joekratzat.com/blog/2012/objective-c-blocks-vs-nsnotificationcenter-for-async-completion/</link>
      <pubDate>Mon, 31 Dec 2012 21:43:00 -0500</pubDate>
      
      <guid>http://joekratzat.com/blog/2012/objective-c-blocks-vs-nsnotificationcenter-for-async-completion/</guid>
      <description>&lt;p&gt;I&amp;rsquo;m working on a project that was created pre iOS 4.0, and is now only supporting iOS 4 and later. This means I am able to finally use &lt;a href=&#34;http://developer.apple.com/library/ios/#documentation/cocoa/Conceptual/Blocks/Articles/00_Introduction.html&#34;&gt;Blocks&lt;/a&gt;. So what was being used to inform an object when a called async method passed or failed? &lt;a href=&#34;https://developer.apple.com/library/mac/#documentation/Cocoa/Reference/Foundation/Classes/NSNotificationCenter_Class/Reference/Reference.html&#34;&gt;NSNotificationCenter&lt;/a&gt;. This was the original code and it worked pretty well:&lt;/p&gt;

&lt;span data-gist-id=&#34;4422401&#34; data-gist-show-loading=&#34;true&#34; data-gist-hide-footer=&#34;false&#34; data-gist-hide-line-numbers=&#34;true&#34;&gt;&lt;/span&gt;


&lt;!-- more --&gt;

&lt;p&gt;It allowed the method getSubscriptionFromServer to inform the caller in the Subscription class to know when getSubscriptionFromServer was complete, or failed. This might not have been the best way to handle this, but it doesn&amp;rsquo;t matter now.&lt;/p&gt;

&lt;p&gt;Luckly I was able to make some changes, like dropping iOS 3.0 support and included the use of Blocks. This alowed me to change the above code to something like the following:&lt;/p&gt;

&lt;span data-gist-id=&#34;4422453&#34; data-gist-show-loading=&#34;true&#34; data-gist-hide-footer=&#34;false&#34; data-gist-hide-line-numbers=&#34;true&#34;&gt;&lt;/span&gt;


&lt;p&gt;This helped clean up the code and encapsulate a lot of what was going on. The person using the Datacontroller class no longer needed to know about the Notifications. The method signature will now tell them all they need to know inorder to call getSubscriptionFromServer.&lt;/p&gt;

&lt;p&gt;While Blocks is nothing new, I was happy to be able to finally use them to help clean up the codebase.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Spring-ws SOAP &#39;No adapter for endpoint&#39;</title>
      <link>http://joekratzat.com/blog/2012/spring-ws-soap-no-adapter-for-endpoint/</link>
      <pubDate>Wed, 26 Sep 2012 20:40:00 -0500</pubDate>
      
      <guid>http://joekratzat.com/blog/2012/spring-ws-soap-no-adapter-for-endpoint/</guid>
      <description>&lt;p&gt;Why am I using SOAP? I don&amp;rsquo;t want to talk about it. Basically I have a need for a Spring MVC project to provide a Spring-ws SOAP endpoint.
After following the Spring documentation &lt;a href=&#34;http://static.springsource.org/spring-ws/sites/2.0/reference/html/tutorial.html#d5e190&#34;&gt;here&lt;/a&gt; and downloading the source code &lt;a href=&#34;http://static.springsource.org/spring-ws/sites/2.0/downloads/releases.html&#34;&gt;here&lt;/a&gt; I noticed something. The documentation is using jdom for marshalling. While the source code is using jdom2.&lt;/p&gt;

&lt;p&gt;After struggling for a while I find out that using jdom, even with everything setup correctly, will result in the following error:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&#39;java.lang.IllegalStateException: No adapter for endpoint&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This, I guess, is a &lt;a href=&#34;https://jira.springsource.org/browse/SWS-782?page=com.atlassian.jira.plugin.system.issuetabpanels:changehistory-tabpanel&#34;&gt;known issue&lt;/a&gt;. The thing to do is use jdom2, or something else like JAXB, Castor, etc.&lt;/p&gt;

&lt;p&gt;I know documentation is hard to keep up-to-date. I just thought I should put something else out on the net incause others have the same issue.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Git: a powerful front-end to Subversion</title>
      <link>http://joekratzat.com/blog/2012/git-a-powerful-front-end-to-subversion/</link>
      <pubDate>Sat, 28 Jan 2012 22:13:00 -0500</pubDate>
      
      <guid>http://joekratzat.com/blog/2012/git-a-powerful-front-end-to-subversion/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://git-scm.com/&#34;&gt;Git&lt;/a&gt; is a great version control system. I have used it for some time on many different projects and I really enjoy working with it. My life is bit simpler because of Git.&lt;/p&gt;

&lt;p&gt;When I had to move back to &lt;a href=&#34;http://subversion.apache.org/&#34;&gt;SVN&lt;/a&gt; I didn&amp;rsquo;t really like the idea of losing local features branches, stashing , and easy merging. Luckily, Git has the a &lt;a href=&#34;http://schacon.github.com/git/git-svn.html&#34;&gt;svn command&lt;/a&gt; which allows me to use Git as my front end to SVN.&lt;/p&gt;

&lt;p&gt;What do I mean by front end? Basically, I use Git on my development machine, and use the git svn command to push/pull code from the SVN Server. Git is how I interact with SVN.&lt;/p&gt;

&lt;p&gt;Why, if SVN is already being used, would you use Git? SVN is used in many code bases I have been working on lately, but that doesn&amp;rsquo;t mean I can&amp;rsquo;t still use the advantages of Git.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Branching and merging:&lt;/strong&gt; I&amp;rsquo;m sure, like me, you have tasks that change quickly. On a daily basis I need to switch from working on a new feature, fixing bugs, etc. Git allows me to switch from a feature branch I&amp;rsquo;m currently working on, to a new branch for a bug/fix then merge the new branch and push upstream. Then finally get back into my larger feature branch.&lt;/p&gt;

&lt;p&gt;Typically with SVN or other CVSs this is a bit more challenging. Many times I would have to say &amp;ldquo;Hold on while I get to a good stopping point&amp;rdquo;. With Git I temporarily save my changes (Stash - will talk about a bit later) and create a new branch and start working.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Working Locally:&lt;/strong&gt; I don&amp;rsquo;t have to comment feature code out just to make sure it is checked in. Since Git is a &lt;a href=&#34;http://en.wikipedia.org/wiki/Distributed_revision_control&#34;&gt;DVCS&lt;/a&gt; I can store all my changes locally, to later be pushed to SVN when ready. This allows me to &lt;a href=&#34;http://www.codinghorror.com/blog/2008/08/check-in-early-check-in-often.html&#34;&gt;check in early and often&lt;/a&gt; locally without messing up a co-worker by having crazy comment code strewn about the code base. I can make sure my feature is fully ready, and tested, before pushing upstream for all to use.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Stashing:&lt;/strong&gt; As mentioned before Git allows me to temporarly check in current code changes. Many times someone will point out a trivial issue in the code which needs to be in production &amp;ldquo;now&amp;rdquo;. With &lt;a href=&#34;http://book.git-scm.com/4_stashing.html&#34;&gt;git stash&lt;/a&gt; I can save whatever it is I&amp;rsquo;m working on with out having to check in non-working code, again saving me time to not have to be in &amp;ldquo;a good stopping point&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;There are many other features Git has, these are the ones that make it a great front end for SVN. Using git svn not only saves me time, but it allows me to keep my code out of the master SVN repository until it is good and ready. I can count the number of times I have been working in newly pulled code only to find something is broken because line 23 in some file should have been commented out. Since I don&amp;rsquo;t like when others do that I choose to use Git to help make everyones lives a bit easier. What is the old saying: Do unto others as you would have them do to you.&lt;/p&gt;

&lt;p&gt;Two tutorials that helped me:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.viget.com/extend/effectively-using-git-with-subversion/&#34;&gt;http://www.viget.com/extend/effectively-using-git-with-subversion/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://nvie.com/posts/a-successful-git-branching-model/&#34;&gt;http://nvie.com/posts/a-successful-git-branching-model/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Unity3D and JSON parsing</title>
      <link>http://joekratzat.com/blog/2011/unity3d-and-json-parsing/</link>
      <pubDate>Thu, 21 Apr 2011 21:54:00 -0500</pubDate>
      
      <guid>http://joekratzat.com/blog/2011/unity3d-and-json-parsing/</guid>
      <description>&lt;p&gt;Today I was working on a Unity3D web player project that requires pulling JSON from a remote server. I needed a way to parse the JSON string. After working with multiple JSON libraries (Jayrock being the main one) I found that LitJson worked well with in Unity once you had the DLL.
I was unable to get Jayrock to work with Unity&amp;rsquo;s web player. Turns out that Unity desktop builds use a subset of the Mono SDK, which can be changed to use the full SDK. However, the web player can not be changed, limiting access to System.web which is needed by Jayrock.&lt;/p&gt;

&lt;p&gt;While running ./configure it would output the following error message:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;configure: error: Please install mono version 1.1.17 or later
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I did confirm my mono version:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Mono JIT compiler version 2.6.7
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After using the Googles for a bit ran accross a post a link to download a zip file that had the DLL already built: Download &lt;a href=&#34;http://sourceforge.net/projects/litjson/files/litjson/0.5.0/litjson-0.5.0-bin.zip/download&#34;&gt;litjson-0.5.0-bin.zip (224.2 KB)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With some code changes JsonMapper seems to be working and I&amp;rsquo;m able to parse the JSON.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;List&amp;lt;LessonProgress&amp;gt; listOfLessonProgress = JsonMapper.ToObject&amp;lt;List&amp;lt;LessonProgress&amp;gt;&amp;gt;(www.text);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;What I was working with:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Unity3D version: 3.3.0f4&lt;/p&gt;

&lt;p&gt;MonoDevelop version: 2.4.2&lt;/p&gt;

&lt;p&gt;OS: OSX (10.6.7)&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>